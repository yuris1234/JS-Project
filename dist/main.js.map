{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js-project/./src/scripts/bucket.js","webpack://js-project/./src/scripts/noteTable.js","webpack://js-project/./src/scripts/note.js","webpack://js-project/./src/scripts/game.js","webpack://js-project/./src/index.js"],"sourcesContent":["class Bucket {\n    constructor(width, height, ctx) {\n        this.canvasWidth = width;\n        this.canvasHeight = height;\n        this.pos = this.canvasWidth/2; \n        this.velocity = 0;\n        this.keys = {\n            right: {\n                pressed: false\n            },\n            left: {\n                pressed: false\n            }\n        }\n        this.ctx = ctx;\n\n        let boundArrowKeyDown = this.handleArrowKeyDown.bind(this);\n        let boundArrowKeyUp = this.handleArrowKeyUp.bind(this);\n        document.addEventListener(\"keydown\", (e) => {\n            boundArrowKeyDown(e);\n        })\n        document.addEventListener(\"keyup\", (e) => {\n            boundArrowKeyUp(e);\n        })\n    }\n\n    draw() {\n        let img = new Image();\n        img.src = \"src/scripts/half-sphere.png\";\n        img.onload = () => {\n            this.ctx.fillStyle = 'white';\n            this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n            this.ctx.drawImage(img, this.pos, this.canvasHeight-100, 100, 100);\n        }\n    }\n\n    update() {\n        this.draw();\n        this.velocity = 0;\n        if (this.keys.right.pressed && this.pos <= this.canvasWidth-100) this.velocity = 3;\n        else if (this.keys.left.pressed && this.pos >= 0) this.velocity = -3;\n        this.pos += this.velocity;\n    }\n\n    handleArrowKeyDown(e) {\n        switch (e.key) {\n            case \"ArrowRight\":\n                this.keys.right.pressed = true;\n                break;\n            case \"ArrowLeft\":\n                this.keys.left.pressed = true;\n                break;\n        }\n    }\n\n    handleArrowKeyUp(e) {\n        switch (e.key) {\n            case \"ArrowRight\":\n                this.keys.right.pressed = false;\n                break;\n            case \"ArrowLeft\":\n                this.keys.left.pressed = false;\n                break;\n        }\n    }\n\n}\nexport default Bucket;","const noteFreq = [];\n// for (let i = 4; i < 9; i++) {\n//     noteFreq[i] = [];\n// }\nnoteFreq[0] = [];\nnoteFreq[1] = [];\nnoteFreq[0]['C'] = 261.6;\nnoteFreq[0]['D'] = 277.2;\nnoteFreq[0]['E'] = 329.6;\nnoteFreq[0]['F'] = 349.2;\nnoteFreq[0]['G'] = 392.0;\nnoteFreq[0]['A'] = 440.0;\nnoteFreq[0]['B'] = 493.9;\nnoteFreq[1]['C'] = 523.3;\n\nexport default noteFreq;","import noteFreq from \"./noteTable\";\n\nclass Note {\n    constructor(canvas, ctx, audioCtx) {\n\n        this.velocity = this.getRandomArbitrary(1, 3);\n        this.pos = {\n            x: this.getRandomArbitrary(100, canvas.width),\n            y: 0\n        };\n        this.audioCtx = audioCtx\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.appear = true;\n        this.collision = false;\n        this.beat = this.getRandomInt(1, 5)\n        this.alpha = this.getRandomAlpha();\n        this.sound = this.createAudio();\n        // this.freq = noteFreq[this.getRandomInt(0,1)][this.alpha];\n    }\n\n    createAudio() {\n        const sound = new Audio();\n        sound.crossOrigin = \"anonymous\";\n        switch (this.alpha) {\n            case \"A\": \n                sound.src = \"src/scripts/a.mp3\";\n                break;\n            case \"B\":\n                sound.src = \"src/scripts/b.mp3\";\n                break;\n            case \"C\":\n                sound.src = \"src/scripts/c.mp3\";\n                break;\n            case \"D\":\n                sound.src = \"src/scripts/d.mp3\";\n                break;\n            case \"E\":\n                sound.src = \"src/scripts/e.mp3\";\n                break;\n            case \"F\":\n                sound.src = \"src/scripts/f.mp3\";\n                break;\n            case \"G\":\n                sound.src = \"src/scripts/g.mp3\";\n                break;\n        }\n        const source = this.audioCtx.createMediaElementSource(sound);\n        source.connect(this.audioCtx.destination);\n        return sound;\n    }\n\n    draw() {\n        let img = new Image();\n        // if (this.beat === 2) {\n        //     img.src = \"src/scripts/half_note.png\";\n        //     img.onload = () => {\n        //         this.ctx.fillStyle = 'red';\n        //         this.ctx.font = \"30px serif\";\n        //         this.ctx.drawImage(img, this.pos.x, this.pos.y, 50, 50);\n        //         this.ctx.fillText(this.alpha,this.pos.x + 50, this.pos.y+10, 100);\n        //     }\n        // } else {\n        img.src = \"src/scripts/music_note.png\";\n        img.onload = () => {\n            this.ctx.fillStyle = 'red';\n            this.ctx.font = \"30px serif\";\n            this.ctx.drawImage(img, this.pos.x, this.pos.y, 100, 100);\n            this.ctx.fillText(this.alpha,this.pos.x + 50, this.pos.y+10, 100);\n        };\n    }\n\n    update() {\n        if (this.pos.y >= this.canvas.height- 100 || this.collision) {\n            this.appear = false;\n        } else {\n            this.draw();\n            this.pos.y += this.velocity;\n        }\n    }\n\n    getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    getRandomAlpha() {\n        let alpha = ['A','B','C','D','E','F','G'];\n        let num = this.getRandomInt(0,7);\n        return alpha[num];\n    }\n\n    playTone() {\n        // debugger\n        // const osc = this.audioCtx.createOscillator();\n        // osc.type = \"triangle\";\n        // osc.frequency.value = this.freq;\n        // // (this.freq, this.audioCtx.currentTime)\n        // osc.connect(this.audioCtx.destination)\n        this.sound.play();\n        // osc.start();\n        // if (this.beat === 2) {\n        //     osc.stop(this.audioCtx.currentTime + 0.50);\n        // } else {\n        //     osc.stop(this.audioCtx.currentTime + 0.25);\n        // }\n        // osc.stop(this.audioCtx.currentTime + 0.25);\n    }\n\n    checkCollision(bucket) {\n        if (\n            this.pos.x <= bucket.pos + 50 &&\n            this.pos.y >= this.canvas.height - 100 &&\n            this.pos.x >= bucket.pos - 50\n        ) {\n            this.collision = true;\n            this.appear = false;\n        }\n        return this.collision;\n    }\n\n}\nexport default Note;","import Bucket from \"./bucket\";\nimport Note from \"./note\";\n\nclass Game {\n    constructor(canvas, ctx, audioCtx) {\n        // debugger\n        this.bucket = new Bucket(canvas.width, canvas.height, ctx);\n        this.notes = [];\n        this.collectedNotes = [];\n        this.ctx = ctx;\n        this.audioCtx = audioCtx;\n        this.canvas = canvas;\n        this.newNotes();\n        this.animate();\n    }\n\n    run() {\n        this.animate();\n    }\n\n    newNotes() {\n        for (let i = 0; i < 10; i++) {\n            // debugger\n            let newNote = new Note(this.canvas, this.ctx, this.audioCtx);\n            this.notes.push(newNote);\n        }\n        // debugger\n    }\n\n    animate() {\n        let stopAnimation = false;\n        this.bucket.update();\n\n        let notesHolder = [];\n        this.notes.forEach((note) => {\n            // note.update();\n            if (note.checkCollision(this.bucket)) {\n                note.playTone();\n                this.collectedNotes.push(note);\n\n            }\n            if (note.appear) {\n                // debugger\n                notesHolder.push(note);\n            }\n            note.update();\n            if (this.collectedNotes.length >= 10) {\n                // debugger\n                this.stopAnimation();\n                stopAnimation = true;\n            }\n            // if (note.appear) {\n            //     notesHolder.push(note);\n            // }\n        })\n        if (stopAnimation === true) return;\n        this.notes = notesHolder;\n        while (this.notes.length < 10) {\n            let newNote = new Note(this.canvas, this.ctx, this.audioCtx);\n            this.notes.push(newNote);\n        } \n    \n        let boundAnimate = this.animate.bind(this);\n        window.requestAnimationFrame(boundAnimate);\n    }\n\n    stopAnimation() {\n        let i = 1;\n        this.collectedNotes.forEach((note) => {\n            setTimeout(() => {\n                note.playTone();\n            },(i++)*500);\n        })\n\n    }\n}\nexport default Game;","// import Example from \"./scripts/example\";\nimport Bucket from \"./scripts/bucket.js\";\nimport Game from \"./scripts/game.js\";\n// const audioContext = new audioContext();\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById('game-canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = (window.innerWidth);\n    canvas.height = (window.innerHeight);\n    let audioCtx = '';\n    document.addEventListener(\"click\", () => {\n        audioCtx = new AudioContext();\n        let game = new Game(canvas, ctx, audioCtx);\n        game.run();\n    })\n\n    // let game = new Game(canvas, ctx, audioCtx);\n    // game.run();\n})"],"names":["constructor","width","height","ctx","this","canvasWidth","canvasHeight","pos","velocity","keys","right","pressed","left","boundArrowKeyDown","handleArrowKeyDown","bind","boundArrowKeyUp","handleArrowKeyUp","document","addEventListener","e","draw","img","Image","src","onload","fillStyle","fillRect","drawImage","update","key","noteFreq","canvas","audioCtx","getRandomArbitrary","x","y","appear","collision","beat","getRandomInt","alpha","getRandomAlpha","sound","createAudio","Audio","crossOrigin","createMediaElementSource","connect","destination","font","fillText","min","max","Math","random","ceil","floor","playTone","play","checkCollision","bucket","Bucket","notes","collectedNotes","newNotes","animate","run","i","newNote","Note","push","stopAnimation","notesHolder","forEach","note","length","boundAnimate","window","requestAnimationFrame","setTimeout","getElementById","getContext","innerWidth","innerHeight","AudioContext","Game"],"sourceRoot":""}