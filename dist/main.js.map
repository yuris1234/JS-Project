{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js-project/./src/scripts/bucket.js","webpack://js-project/./src/scripts/noteTable.js","webpack://js-project/./src/scripts/note.js","webpack://js-project/./src/scripts/game.js","webpack://js-project/./src/index.js"],"sourcesContent":["class Bucket {\n    constructor(width, height, ctx) {\n        this.canvasWidth = width;\n        this.canvasHeight = height;\n        this.pos = this.canvasWidth/2; \n        this.velocity = 0;\n        this.keys = {\n            right: {\n                pressed: false\n            },\n            left: {\n                pressed: false\n            }\n        }\n        this.ctx = ctx;\n\n        let boundArrowKeyDown = this.handleArrowKeyDown.bind(this);\n        let boundArrowKeyUp = this.handleArrowKeyUp.bind(this);\n        document.addEventListener(\"keydown\", (e) => {\n            boundArrowKeyDown(e);\n        })\n        document.addEventListener(\"keyup\", (e) => {\n            boundArrowKeyUp(e);\n        })\n    }\n\n    draw() {\n        let img = new Image();\n        img.src = \"src/scripts/half-sphere.png\";\n        img.onload = () => {\n            this.ctx.fillStyle = 'white';\n            this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n            this.ctx.drawImage(img, this.pos, this.canvasHeight-100, 100, 100);\n        }\n    }\n\n    update() {\n        this.draw();\n        this.velocity = 0;\n        if (this.keys.right.pressed && this.pos <= this.canvasWidth-100) this.velocity = 3;\n        else if (this.keys.left.pressed && this.pos >= 0) this.velocity = -3;\n        this.pos += this.velocity;\n    }\n\n    handleArrowKeyDown(e) {\n        switch (e.key) {\n            case \"ArrowRight\":\n                this.keys.right.pressed = true;\n                break;\n            case \"ArrowLeft\":\n                this.keys.left.pressed = true;\n                break;\n        }\n    }\n\n    handleArrowKeyUp(e) {\n        switch (e.key) {\n            case \"ArrowRight\":\n                this.keys.right.pressed = false;\n                break;\n            case \"ArrowLeft\":\n                this.keys.left.pressed = false;\n                break;\n        }\n    }\n\n}\nexport default Bucket;","const noteFreq = [];\n// for (let i = 4; i < 9; i++) {\n//     noteFreq[i] = [];\n// }\nnoteFreq[0] = [];\nnoteFreq[1] = [];\nnoteFreq[0]['C'] = 261.6;\nnoteFreq[0]['D'] = 277.2;\nnoteFreq[0]['E'] = 329.6;\nnoteFreq[0]['F'] = 349.2;\nnoteFreq[0]['G'] = 392.0;\nnoteFreq[0]['A'] = 440.0;\nnoteFreq[0]['B'] = 493.9;\nnoteFreq[1]['C'] = 523.3;\n\nexport default noteFreq;","import noteFreq from \"./noteTable\";\n\nclass Note {\n    constructor(canvas, ctx, audioCtx) {\n\n        this.velocity = this.getRandomArbitrary(1, 3);\n        this.pos = {\n            x: this.getRandomArbitrary(100, canvas.width),\n            y: 0\n        };\n        this.audioCtx = audioCtx\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.appear = true;\n        this.collision = false;\n        this.freq = noteFreq[this.getRandomInt(0,1)][this.getRandomAlpha()];\n    }\n\n    draw() {\n        let img = new Image();\n        img.src = \"src/scripts/music_note.png\";\n        img.onload = () => {\n            this.ctx.drawImage(img, this.pos.x, this.pos.y, 100, 100);\n        }\n    }\n\n    update() {\n        if (this.pos.y >= this.canvas.height- 100) {\n            this.appear = false;\n            this.playTone();\n        } else {\n            this.draw();\n            this.pos.y += this.velocity;\n        }\n    }\n\n    getRandomArbitrary(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    getRandomAlpha() {\n        let alpha = ['A','B','C','D','E','F','G'];\n        let num = this.getRandomInt(0,6);\n        return alpha[num];\n    }\n\n    playTone() {\n        // debugger\n        const osc = this.audioCtx.createOscillator();\n        osc.type = \"sawtooth\";\n        osc.frequency.value = this.freq;\n        // (this.freq, this.audioCtx.currentTime)\n        osc.connect(this.audioCtx.destination)\n        osc.start();\n        osc.stop(this.audioCtx.currentTime + 0.1);\n    }\n\n    // checkCollision(bucket) {\n    //     if (\n    //         this.pos.x <= bucket.pos + 100 &&\n    //         this.pos.y >= this.canvas.height - 100 &&\n    //         this.pos.x >= bucket.pos - 100 &&\n    //         this.pos.y <= this.canvas.height + 100 \n    //     ) {\n    //         this.collision = true;\n\n    //     }\n    // }\n\n}\nexport default Note;","import Bucket from \"./bucket\";\nimport Note from \"./note\";\n\nclass Game {\n    constructor(canvas, ctx, audioCtx) {\n        // debugger\n        this.bucket = new Bucket(canvas.width, canvas.height, ctx);\n        this.notes = [];\n        this.ctx = ctx;\n        this.audioCtx = audioCtx;\n        this.canvas = canvas;\n        this.newNotes();\n        this.animate();\n    }\n\n    run() {\n        this.animate();\n    }\n\n    newNotes() {\n        for (let i = 0; i < 10; i++) {\n            // debugger\n            let newNote = new Note(this.canvas, this.ctx, this.audioCtx);\n            this.notes.push(newNote);\n        }\n        // debugger\n    }\n\n    animate() {\n        this.bucket.update();\n\n        let notesHolder = [];\n        this.notes.forEach((note) => {\n            if (note.appear) {\n                notesHolder.push(note);\n            }\n            note.checkCollision(this.bucket);\n            note.update();\n        })\n        this.notes = notesHolder;\n        while (this.notes.length < 10) {\n            let newNote = new Note(this.canvas, this.ctx, this.audioCtx);\n            this.notes.push(newNote);\n        } \n    \n        let boundAnimate = this.animate.bind(this);\n        window.requestAnimationFrame(boundAnimate);\n    }\n\n    // createNoteTable() {\n    //     const noteFreq = [];\n    //     for (let i = 4; i < 9; i++) {\n    //         noteFreq[i] = [];\n    //     }\n    //     noteFreq[4]['C'] = 261.6;\n    //     noteFreq[4]['D'] = 277.2;\n    //     noteFreq[4]['E'] = 329.6;\n    //     noteFreq[4]['F'] = 349.2;\n    //     noteFreq[4]['G'] = 392.0;\n    //     noteFreq[4]['A'] = 440.0;\n    //     noteFreq[4]['B'] = 493.9;\n    //     noteFreq[5]['C'] = 523.3;\n    // }\n}\nexport default Game;","// import Example from \"./scripts/example\";\nimport Bucket from \"./scripts/bucket.js\";\nimport Game from \"./scripts/game.js\";\n// const audioContext = new audioContext();\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById('game-canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = (window.innerWidth);\n    canvas.height = (window.innerHeight);\n    let audioCtx = '';\n    document.addEventListener(\"click\", () => {\n        audioCtx = new AudioContext();\n        let game = new Game(canvas, ctx, audioCtx);\n        game.run();\n    })\n\n    // let game = new Game(canvas, ctx, audioCtx);\n    // game.run();\n})"],"names":["constructor","width","height","ctx","this","canvasWidth","canvasHeight","pos","velocity","keys","right","pressed","left","boundArrowKeyDown","handleArrowKeyDown","bind","boundArrowKeyUp","handleArrowKeyUp","document","addEventListener","e","draw","img","Image","src","onload","fillStyle","fillRect","drawImage","update","key","noteFreq","canvas","audioCtx","getRandomArbitrary","x","y","appear","collision","freq","getRandomInt","getRandomAlpha","playTone","min","max","Math","random","ceil","floor","osc","createOscillator","type","frequency","value","connect","destination","start","stop","currentTime","bucket","Bucket","notes","newNotes","animate","run","i","newNote","Note","push","notesHolder","forEach","note","checkCollision","length","boundAnimate","window","requestAnimationFrame","getElementById","getContext","innerWidth","innerHeight","AudioContext","Game"],"sourceRoot":""}